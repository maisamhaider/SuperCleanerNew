package com.example.junckcleaner.duplicatenew.models;

import java.util.zip.Checksum;

public class CRC641 implements Checksum {
    private static final long[] CRC_TABLE = {0, 4823603603198064275L, -8799536867313423066L, -4102460140266038347L, 5274672035359026399L, 847670339082705484L, -3687703096809061895L, -8204920280532076694L, -7897400002991498818L, -3416493369634853075L, 1695340678165410968L, 6158653484774949387L, -2642017800032930463L, -7375406193618123790L, 6824194888265062471L, 2036903512645398228L, 7367177604490692079L, 2651944067726553980L, -2027539948475389751L, -6832986739269706150L, 3390681356330821936L, 7926053118503640995L, -6129437104159652842L, -1720589984720932219L, -838878488614904751L, -5284035600065860926L, 8194994013375312247L, 3695931686473304036L, -4798354297179426674L, -29216381152229859L, 4073807025290796456L, 8825348881154370363L, -3712388864728167458L, -8175704493167919795L, 5303888135453107960L, 822984195088142443L, -8842369567448504575L, -4055079896950779502L, 47380625301539367L, 4780770595170139316L, 6781362712661643872L, 2084283301222999283L, -2594637836702269626L, -7418238609469699627L, 1670654249350217407L, 6187869865390245932L, -7868183379440544871L, -3441179969441864438L, -6176817727850508751L, -1677756977229809502L, 3433514057002836759L, 7878672873577829764L, -2056756046958927122L, -6808300595812084611L, 7391863372946608072L, 2622728278751721819L, 4044590402276644751L, 8850035479350698268L, -4773667866753680727L, -58432762304459718L, 8147614050581592912L, 3738764100714335683L, -796046311400810890L, -5331415389180272411L, -2736778905407184593L, -7424777729456334916L, 6909860770376862729L, 2095335087373712026L, -7838967802803335696L, -3330827834883769501L, 1645968390176284886L, 6063892853452478021L, 5216239979862816913L, 762004938812542466L, -3638330943300856393L, -8110159793901559004L, 94761250603078734L, 4872975272980325085L, -8885202883369272984L, -4160891860223176709L, -4884018648386263872L, -87649760589671853L, 4168566602445998566L, 8874722219015798645L, -789505769768794081L, -5189275673404539252L, 8136561383943382329L, 3610266854770152362L, 3341308498700434814L, 7831293060043656173L, -6071004342929059752L, -1634925014233504053L, 7452841817450123681L, 2710377314828461874L, -2122299393295057785L, -6882359938883728876L, 1621282580641819377L, 6093108618008534114L, -7809751662704506921L, -3355513954459619004L, 6867028114005673518L, 2142715359940571325L, -2689398326553892088L, -7467610764051505765L, -8928035101125971121L, -4113512093917854244L, 142141253402664553L, 4830142882085382394L, -3663017327816335472L, -8080943384572581629L, 5245456557503443638L, 737318311902463013L, 8089180804553289502L, 3653099890976004493L, -746673115008155080L, -5236655945434467157L, 4139350461810230209L, 8899408340202190162L, -4859332840462471449L, -116865524608919436L, -2151515972546365792L, -6857673311436849101L, 7477528201428671366L, 2681160907110034709L, -6118384347339187585L, -1592092622801621780L, 3384140715920324441L, 7783913295349006794L, -649954581304675123L, -5473557810814369186L, 8294265019745835499L, 3597188614796881784L, -4627022532955826158L, -200020480187781503L, 4190670174747424052L, 8707887697765516199L, 7249714899603402099L, 2768808468102880224L, -2198343082210770859L, -6661655669767539002L, 3291936780352569772L, 8025325358597240639L, -6318958366804595574L, -1531666754935514599L, -8014264113983917790L, -3299030950906050639L, 1524009877625084932L, 6329456346323069591L, -2741289767939269123L, -7276661886601712786L, 6635271944638132443L, 2226424485906433608L, 189522501206157468L, 4634679410803088911L, -8700793527748901446L, -4201731419897564375L, 5445476407655580739L, 676338306971005648L, -3570241628335462043L, -8321783720446353418L, 4215391513593610003L, 8678706776937023872L, -4656203148037909963L, -175299521179343706L, 8337133204891997132L, 3549843186494580063L, -697299635677954326L, -5430689936249599879L, -6276090757712140627L, -1579011539537588162L, 3244592164593781643L, 8068192726900473112L, -2173621305822786958L, -6690837097930261279L, 7220533709540304724L, 2793530071884239303L, 6682616997400869628L, 2183556611878603887L, -2784157953622239270L, -7229316456688737975L, 1553190491096487459L, 6304735387851432112L, -8038985453367035131L, -3269850028467008106L, -3541060438809304254L, -8346505322617170479L, 5420754629656923748L, 705519735670536439L, -8653448912526913635L, -4244598786590115570L, 146654890503152315L, 4682024195942093864L, 3242565161283638754L, 7930564333232481137L, -6260526837692483388L, -1446000823986287017L, 7335380351123765565L, 2827240748300537774L, -2293103759149444069L, -6711027908919238008L, -4712687845698204580L, -258452628580484401L, 4285430719881142650L, 8757259798139230185L, -600582823994630013L, -5378796653107784176L, 8235833358291897765L, 3511522545606540086L, 5387043107155988493L, 590673871457609374L, -3520868240560767701L, -8227024187835708488L, 284282506805329106L, 4684052045342640705L, -8786458309538786828L, -4260164093874051225L, -2836049918219908685L, -7326034655632670944L, 6720936860919424149L, 2284857304564388358L, -7955830958702664340L, -3213366649347189761L, 1474636623804926026L, 6234696958930763481L, -2268382464602972612L, -6740208858461411153L, 7306199781952008986L, 2851961734412043657L, -6217658610393042205L, -1493346230016310160L, 3195220067441434565L, 7973432182840617302L, 8278700923620460418L, 3464177731752866065L, -647927393305171292L, -5335929258237305801L, 4310152537884486493L, 8728078392784608718L, -4741869075766049157L, -233731049217838872L, -8739113215159641133L, -4303031945092731584L, 241414281116563189L, 4731397450835853414L, -3491687670852208884L, -8251745175557897825L, 5362321814220069418L, 619854820462849209L, 1503817855483314797L, 6209975379031176446L, -7980552776169197749L, -3184185245603243560L, 6768281431840648882L, 2241989909157107745L, -2878917483011538028L, -7278689843389549305L};
    private long crc = 0;

    public long getValue() {
        return this.crc;
    }

    public void reset() {
        this.crc = 0;
    }

    public long update(char[] cArr, int i) {
        long j = 0;
        for (int i2 = 0; i2 < i; i2++) {
            j = (j << 8) ^ CRC_TABLE[(((char) ((int) (j >> 56))) ^ cArr[i2]) & 255];
        }
        System.out.println(j);
        return j ^ 0;
    }

    public void update(byte b) {
        long j = this.crc;
        long j2 = j << 8;
        this.crc = j2 ^ CRC_TABLE[(b ^ ((int) (j >> 56))) & 255];
    }

    public void update(int i) {
        update((byte) (i & 255));
    }


    public void update(byte[] bArr, int i, int i2) {
        while (i2 > 0) {
            update(bArr[i]);
            i2--;
            i++;
        }
    }
}
